{"version":3,"file":"static/js/34.fe2b7676.chunk.js","mappings":"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","sources":["components/LeftBoxWrapper.js","components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","components/hook-form/RHFAutocomplete.js","components/hook-form/RHFCodes.js","pages/dashboard/UploadAvatar.js","sections/settings/ProfileForm.js","pages/dashboard/Profile.js"],"sourcesContent":["// MUI\r\nimport { Stack, Box } from \"@mui/material\";\r\n\r\nconst LeftBoxWrapper = ({ children, padding, spacing }) => {\r\n  //Chat\r\n  const chatStyle = {\r\n    position: \"relative\",\r\n    height: \"100vh\",\r\n    width: 320,\r\n    backgroundColor: (theme) =>\r\n      theme.palette.mode === \"light\"\r\n        ? \"#F8FAFF\"\r\n        : theme.palette.background.paper,\r\n    boxShadow: \"0px 0px 2px rgba(0, 0, 0, 0.25)\",\r\n  };\r\n\r\n  return (\r\n    <Box sx={chatStyle}>\r\n      <Stack p={padding} spacing={spacing} direction=\"column\" height=\"100%\">\r\n        {children}\r\n      </Stack>\r\n    </Box>\r\n  );\r\n};\r\n\r\nexport default LeftBoxWrapper;\r\n","// Proptypes\r\nimport PropTypes from \"prop-types\";\r\n\r\n// React Hook Form\r\nimport { FormProvider as Form } from \"react-hook-form\";\r\n\r\nFormProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  methods: PropTypes.object,\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function FormProvider({ children, onSubmit, methods }) {\r\n  return (\r\n    <Form {...methods}>\r\n      <form onSubmit={onSubmit}>{children}</form>\r\n    </Form>\r\n  );\r\n}\r\n","// Proptypes\r\nimport PropTypes from \"prop-types\";\r\n\r\n// React Hook Form\r\nimport { useFormContext, Controller } from \"react-hook-form\";\r\n\r\n// MUI\r\nimport { TextField } from \"@mui/material\";\r\n\r\nRHFTextField.propTypes = {\r\n  name: PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFTextField({ name, helperText, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <TextField\r\n          {...field}\r\n          fullWidth\r\n          value={\r\n            typeof field.value === \"number\" && field.value === 0\r\n              ? \"\"\r\n              : field.value\r\n          }\r\n          error={!!error}\r\n          helperText={error ? error?.message : helperText}\r\n          {...other}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","// Proptypes\r\nimport PropTypes from \"prop-types\";\r\n\r\n// React Hook Form\r\nimport { useFormContext, Controller } from \"react-hook-form\";\r\n\r\n// MUI\r\nimport { Autocomplete, TextField } from \"@mui/material\";\r\n\r\nRHFAutocomplete.propTypes = {\r\n  name: PropTypes.string,\r\n  label: PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFAutocomplete({ name, label, helperText, ...other }) {\r\n  const { control, setValue } = useFormContext();\r\n\r\n  // Autocomplete onChange handler\r\n  const handlerOnChange = (event, newValue) => {\r\n    setValue(name, newValue, { shouldValidate: true });\r\n  };\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <Autocomplete\r\n          {...field}\r\n          fullWidth\r\n          value={\r\n            typeof field.value === \"number\" && field.value === 0\r\n              ? \"\"\r\n              : field.value\r\n          }\r\n          onChange={handlerOnChange}\r\n          {...other}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              label={label}\r\n              error={!!error}\r\n              helperText={error ? error?.message : helperText}\r\n              {...params}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import { Stack, TextField } from \"@mui/material\";\r\nimport { useRef } from \"react\";\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\n\r\nconst RHFCodes = ({ keyName = \"\", inputs = [], ...other }) => {\r\n  const codesRef = useRef(null);\r\n\r\n  const { control } = useFormContext();\r\n\r\n  const handleChangeWithNextField = (event, handleChange) => {\r\n    const { maxLength, value, name } = event.target;\r\n\r\n    const fieldIntIndex = Number(name.replace(keyName, \"\"));\r\n\r\n    const nextField = document.querySelector(\r\n      `input[name=${keyName}${fieldIntIndex + 1}]`\r\n    );\r\n\r\n    if (value.length > maxLength) {\r\n      event.target.value = value[0];\r\n    }\r\n\r\n    if (value.length >= maxLength && fieldIntIndex < 6 && nextField !== null) {\r\n      nextField.focus();\r\n    }\r\n\r\n    handleChange(event);\r\n  };\r\n\r\n  return (\r\n    <Stack direction=\"row\" spacing={2} justifyContent=\"center\" ref={codesRef}>\r\n      {inputs.map((name, index) => (\r\n        <Controller\r\n          key={name}\r\n          name={`${keyName}${index + 1}`}\r\n          control={control}\r\n          render={({ field, fieldState: { error } }) => (\r\n            <TextField\r\n              {...field}\r\n              error={!!error}\r\n              autoFocus={index === 0}\r\n              placeholder={\"-\"}\r\n              onChange={(event) => {\r\n                handleChangeWithNextField(event, field.onChange);\r\n              }}\r\n              onFocus={(event) => event.currentTarget.select()}\r\n              InputProps={{\r\n                sx: {\r\n                  width: { xs: 36, sm: 56 },\r\n                  height: { xs: 36, sm: 56 },\r\n                  \"& input\": { p: 0, textAlign: \"center\" },\r\n                },\r\n              }}\r\n              inputProps={{\r\n                maxLength: 1,\r\n                type: \"number\",\r\n              }}\r\n              {...other}\r\n            />\r\n          )}\r\n        />\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default RHFCodes;\r\n","// React\r\nimport { useState } from \"react\";\r\n\r\n// mui\r\nimport {\r\n  Dialog,\r\n  DialogContent,\r\n  Stack,\r\n  Button,\r\n  Typography,\r\n} from \"@mui/material\";\r\n\r\n// react-avatar-edit\r\nimport Avatar from \"react-avatar-edit\";\r\n\r\nconst ImageUploadDialog = ({\r\n  open,\r\n  handleClose,\r\n  src,\r\n  onClose,\r\n  onCrop,\r\n  onSave,\r\n}) => {\r\n  return (\r\n    <Dialog\r\n      fullWidth\r\n      maxWidth=\"xs\"\r\n      open={open}\r\n      keepMounted\r\n      onClose={handleClose}\r\n      sx={{ p: 4 }}\r\n    >\r\n      <Stack p={2}>\r\n        <Typography variant=\"h5\">Update Profie Picture</Typography>\r\n      </Stack>\r\n      {/* Dialog Content */}\r\n      <DialogContent>\r\n        <Stack sx={{ height: \"100%\" }} spacing={2}>\r\n          <Avatar\r\n            width={400}\r\n            height={300}\r\n            onClose={onClose}\r\n            onCrop={onCrop}\r\n            src={src}\r\n          />\r\n          <Stack direction=\"row\" justifyContent=\"end\">\r\n            <Button\r\n              color=\"primary\"\r\n              size=\"large\"\r\n              type=\"submit\"\r\n              variant=\"outlined\"\r\n              onClick={onSave}\r\n            >\r\n              Save\r\n            </Button>\r\n          </Stack>\r\n        </Stack>\r\n      </DialogContent>\r\n    </Dialog>\r\n  );\r\n};\r\n\r\nconst UploadAvatar = ({ file, onAvatarFileHandler }) => {\r\n  // State\r\n  const [openDialog, setOpenDialog] = useState(false);\r\n\r\n  const [src, setSrc] = useState(null);\r\n  const [preview, setPreview] = useState(file);\r\n\r\n  const onClose = () => {\r\n    setPreview(null);\r\n  };\r\n\r\n  const onCrop = (view) => {\r\n    setPreview(view);\r\n  };\r\n\r\n  const onSave = async () => {\r\n    // console.log(preview);\r\n    onAvatarFileHandler(preview);\r\n    setOpenDialog((prev) => !prev);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <img\r\n        style={{\r\n          display: \"block\",\r\n          margin: \"0 auto\",\r\n          width: \"125px\",\r\n          height: \"125px\",\r\n          borderRadius: \"50%\",\r\n          objectFit: \"cover\",\r\n        }}\r\n        src={preview}\r\n        alt=\"Default Avatar\"\r\n        onClick={() => setOpenDialog((prev) => !prev)}\r\n      />\r\n      {openDialog && (\r\n        <ImageUploadDialog\r\n          open={openDialog}\r\n          handleClose={() => setOpenDialog((prev) => !prev)}\r\n          src={src}\r\n          onClose={onClose}\r\n          onCrop={onCrop}\r\n          onSave={onSave}\r\n        />\r\n      )}\r\n    </>\r\n  );\r\n};\r\n\r\nexport default UploadAvatar;\r\n","// React-hook-form, Yup, @hookform/resolvers\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\n// Hook Form\r\nimport FormProvider from \"../../components/hook-form\";\r\nimport { RHFTextField } from \"../../components/hook-form\";\r\n\r\n// MUI\r\nimport { Alert, Stack, Button } from \"@mui/material\";\r\n\r\n// React Redux\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\n\r\n// Redux\r\nimport { fetchS3Url, openSnackBar } from \"../../store\";\r\nimport { updateMe } from \"../../store\";\r\n\r\nimport UploadAvatar from \"../../pages/dashboard/UploadAvatar\";\r\n\r\n// Using in RegisterForm as well\r\n// Button style\r\nexport const loginButton = {\r\n  bgcolor: \"text.primary\",\r\n  color: (theme) =>\r\n    theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  \"&:hover\": {\r\n    bgcolor: \"text.primary\",\r\n    color: (theme) =>\r\n      theme.palette.mode === \"light\" ? \"common.white\" : \"grey.800\",\r\n  },\r\n};\r\n\r\nconst ProfileForm = () => {\r\n  // React-Redux\r\n  const dispatch = useDispatch();\r\n  const { avatar } = useSelector((state) => state.user.user);\r\n\r\n  //\r\n  let file = avatar;\r\n  const onAvatarFileHandler = (data) => {\r\n    file = data;\r\n  };\r\n\r\n  // React Hook Form\r\n  // Object schema for validation\r\n  const ProfileSchema = Yup.object().shape({\r\n    nickName: Yup.string(),\r\n    about: Yup.string().required(\"About is required\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    nickName: \"\",\r\n    about: \"\",\r\n  };\r\n\r\n  // yup resolver will make the object schema readable for the React hook form\r\n  const methods = useForm({\r\n    resolver: yupResolver(ProfileSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  // Methods to handle form\r\n  const {\r\n    handleSubmit,\r\n    formState: { errors },\r\n  } = methods;\r\n\r\n  // console.log(avatar);\r\n\r\n  const onSubmit = async (data) => {\r\n    dispatch(fetchS3Url(file))\r\n      .unwrap()\r\n      .then((res) => {\r\n        console.log(res);\r\n        dispatch(\r\n          updateMe({\r\n            nickName: data?.nickName,\r\n            about: data?.about,\r\n            avatar: res?.data.split(\"?\")[0],\r\n          })\r\n        )\r\n          .unwrap()\r\n          .then(() => {\r\n            dispatch(\r\n              openSnackBar({\r\n                severity: \"success\",\r\n                message: \"User Profile Updated Successfully!\",\r\n              })\r\n            );\r\n          });\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <Stack spacing={3}>\r\n          {!!errors.afterSubmit && (\r\n            <Alert severity=\"error\">{errors.afterSubmit.message}</Alert>\r\n          )}\r\n          {/* <RHFUploadAvatar name=\"avatar\" />\r\n           */}\r\n          <UploadAvatar file={file} onAvatarFileHandler={onAvatarFileHandler} />\r\n          <RHFTextField\r\n            name=\"nickName\"\r\n            label=\"Nick Name\"\r\n            helperText=\"This name is visible to your contacts\"\r\n          />\r\n          <RHFTextField multiline rows={4} name=\"about\" label=\"About\" />\r\n        </Stack>\r\n        <Stack direction=\"row\" justifyContent=\"end\">\r\n          <Button color=\"primary\" size=\"large\" type=\"submit\" variant=\"outlined\">\r\n            Save\r\n          </Button>\r\n        </Stack>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default ProfileForm;\r\n","// React\r\nimport { useState } from \"react\";\r\n\r\n// Style Wrapper\r\nimport LeftBoxWrapper from \"../../components/LeftBoxWrapper\";\r\n\r\n// MUI\r\nimport { IconButton, Stack, Box, Typography } from \"@mui/material\";\r\nimport { CaretLeft } from \"phosphor-react\";\r\nimport ProfileForm from \"../../sections/settings/ProfileForm\";\r\n\r\nconst Profile = () => {\r\n  return (\r\n    <>\r\n      <LeftBoxWrapper padding={4} spacing={5}>\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing={3}></Stack>\r\n        Header\r\n        <Stack direction=\"row\" alignItems=\"center\" spacing={3}>\r\n          <IconButton>\r\n            <CaretLeft size={24} color=\"#4B4B4B\" />\r\n          </IconButton>\r\n          <Typography variant=\"h5\">Profile</Typography>\r\n        </Stack>\r\n        {/* Profile Form */}\r\n        <ProfileForm />\r\n      </LeftBoxWrapper>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Profile;\r\n"],"names":["children","padding","spacing","sx","position","height","width","backgroundColor","theme","palette","mode","background","paper","boxShadow","p","direction","FormProvider","onSubmit","methods","RHFTextField","name","helperText","other","control","useFormContext","render","field","error","fieldState","TextField","fullWidth","value","message","RHFAutocomplete","label","setValue","handlerOnChange","event","newValue","shouldValidate","Autocomplete","onChange","renderInput","params","keyName","inputs","codesRef","useRef","Stack","justifyContent","ref","map","index","autoFocus","placeholder","handleChange","target","maxLength","fieldIntIndex","Number","replace","nextField","document","querySelector","length","focus","handleChangeWithNextField","onFocus","currentTarget","select","InputProps","xs","sm","textAlign","inputProps","type","ImageUploadDialog","open","handleClose","src","onClose","onCrop","onSave","Dialog","maxWidth","keepMounted","Typography","variant","DialogContent","Button","color","size","onClick","file","onAvatarFileHandler","useState","openDialog","setOpenDialog","preview","setPreview","prev","style","display","margin","borderRadius","objectFit","alt","view","dispatch","useDispatch","useSelector","state","user","avatar","ProfileSchema","Yup","shape","nickName","about","required","useForm","resolver","yupResolver","defaultValues","handleSubmit","errors","formState","data","fetchS3Url","unwrap","then","res","console","log","updateMe","split","openSnackBar","severity","catch","err","afterSubmit","Alert","multiline","rows","LeftBoxWrapper","alignItems","IconButton"],"sourceRoot":""}