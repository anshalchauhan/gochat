{"version":3,"file":"static/js/119.9a57905e.chunk.js","mappings":"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","sources":["components/hook-form/FormProvider.js","components/hook-form/RHFTextField.js","components/hook-form/RHFAutocomplete.js","components/hook-form/RHFCodes.js","pages/dashboard/CreateGroupDialogForm.js","pages/dashboard/Group.js"],"sourcesContent":["// Proptypes\r\nimport PropTypes from \"prop-types\";\r\n\r\n// React Hook Form\r\nimport { FormProvider as Form } from \"react-hook-form\";\r\n\r\nFormProvider.propTypes = {\r\n  children: PropTypes.node,\r\n  methods: PropTypes.object,\r\n  onSubmit: PropTypes.func,\r\n};\r\n\r\nexport default function FormProvider({ children, onSubmit, methods }) {\r\n  return (\r\n    <Form {...methods}>\r\n      <form onSubmit={onSubmit}>{children}</form>\r\n    </Form>\r\n  );\r\n}\r\n","// Proptypes\r\nimport PropTypes from \"prop-types\";\r\n\r\n// React Hook Form\r\nimport { useFormContext, Controller } from \"react-hook-form\";\r\n\r\n// MUI\r\nimport { TextField } from \"@mui/material\";\r\n\r\nRHFTextField.propTypes = {\r\n  name: PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFTextField({ name, helperText, ...other }) {\r\n  const { control } = useFormContext();\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <TextField\r\n          {...field}\r\n          fullWidth\r\n          value={\r\n            typeof field.value === \"number\" && field.value === 0\r\n              ? \"\"\r\n              : field.value\r\n          }\r\n          error={!!error}\r\n          helperText={error ? error?.message : helperText}\r\n          {...other}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","// Proptypes\r\nimport PropTypes from \"prop-types\";\r\n\r\n// React Hook Form\r\nimport { useFormContext, Controller } from \"react-hook-form\";\r\n\r\n// MUI\r\nimport { Autocomplete, TextField } from \"@mui/material\";\r\n\r\nRHFAutocomplete.propTypes = {\r\n  name: PropTypes.string,\r\n  label: PropTypes.string,\r\n  helperText: PropTypes.node,\r\n};\r\n\r\nexport default function RHFAutocomplete({ name, label, helperText, ...other }) {\r\n  const { control, setValue } = useFormContext();\r\n\r\n  // Autocomplete onChange handler\r\n  const handlerOnChange = (event, newValue) => {\r\n    setValue(name, newValue, { shouldValidate: true });\r\n  };\r\n\r\n  return (\r\n    <Controller\r\n      name={name}\r\n      control={control}\r\n      render={({ field, fieldState: { error } }) => (\r\n        <Autocomplete\r\n          {...field}\r\n          fullWidth\r\n          value={\r\n            typeof field.value === \"number\" && field.value === 0\r\n              ? \"\"\r\n              : field.value\r\n          }\r\n          onChange={handlerOnChange}\r\n          {...other}\r\n          renderInput={(params) => (\r\n            <TextField\r\n              label={label}\r\n              error={!!error}\r\n              helperText={error ? error?.message : helperText}\r\n              {...params}\r\n            />\r\n          )}\r\n        />\r\n      )}\r\n    />\r\n  );\r\n}\r\n","import { Stack, TextField } from \"@mui/material\";\r\nimport { useRef } from \"react\";\r\nimport { Controller, useFormContext } from \"react-hook-form\";\r\n\r\nconst RHFCodes = ({ keyName = \"\", inputs = [], ...other }) => {\r\n  const codesRef = useRef(null);\r\n\r\n  const { control } = useFormContext();\r\n\r\n  const handleChangeWithNextField = (event, handleChange) => {\r\n    const { maxLength, value, name } = event.target;\r\n\r\n    const fieldIntIndex = Number(name.replace(keyName, \"\"));\r\n\r\n    const nextField = document.querySelector(\r\n      `input[name=${keyName}${fieldIntIndex + 1}]`\r\n    );\r\n\r\n    if (value.length > maxLength) {\r\n      event.target.value = value[0];\r\n    }\r\n\r\n    if (value.length >= maxLength && fieldIntIndex < 6 && nextField !== null) {\r\n      nextField.focus();\r\n    }\r\n\r\n    handleChange(event);\r\n  };\r\n\r\n  return (\r\n    <Stack direction=\"row\" spacing={2} justifyContent=\"center\" ref={codesRef}>\r\n      {inputs.map((name, index) => (\r\n        <Controller\r\n          key={name}\r\n          name={`${keyName}${index + 1}`}\r\n          control={control}\r\n          render={({ field, fieldState: { error } }) => (\r\n            <TextField\r\n              {...field}\r\n              error={!!error}\r\n              autoFocus={index === 0}\r\n              placeholder={\"-\"}\r\n              onChange={(event) => {\r\n                handleChangeWithNextField(event, field.onChange);\r\n              }}\r\n              onFocus={(event) => event.currentTarget.select()}\r\n              InputProps={{\r\n                sx: {\r\n                  width: { xs: 36, sm: 56 },\r\n                  height: { xs: 36, sm: 56 },\r\n                  \"& input\": { p: 0, textAlign: \"center\" },\r\n                },\r\n              }}\r\n              inputProps={{\r\n                maxLength: 1,\r\n                type: \"number\",\r\n              }}\r\n              {...other}\r\n            />\r\n          )}\r\n        />\r\n      ))}\r\n    </Stack>\r\n  );\r\n};\r\n\r\nexport default RHFCodes;\r\n","// MUI\r\nimport { Button, Stack } from \"@mui/material\";\r\n\r\n// React-hook-form, Yup, @hookform/resolvers\r\nimport { useForm } from \"react-hook-form\";\r\nimport * as Yup from \"yup\";\r\nimport { yupResolver } from \"@hookform/resolvers/yup\";\r\n\r\n// Hook Form\r\nimport FormProvider from \"../../components/hook-form\";\r\nimport { RHFTextField } from \"../../components/hook-form\";\r\nimport { RHFAutocomplete } from \"../../components/hook-form\";\r\n\r\nconst MEMBERS = [\"Name 1\", \"Name 2\", \"Name 3\"];\r\n\r\nconst CreateGroupDialogForm = ({ onClose }) => {\r\n  // React Hook Form\r\n  // Object schema for validation\r\n  const LoginSchema = Yup.object().shape({\r\n    title: Yup.string().required(\"Title is required\"),\r\n    members: Yup.array().min(2, \"Must have at least 2 members\"),\r\n  });\r\n\r\n  const defaultValues = {\r\n    title: \"\",\r\n    members: [],\r\n  };\r\n\r\n  // yup resolver will make the object schema readable for the React hook form\r\n  const methods = useForm({\r\n    resolver: yupResolver(LoginSchema),\r\n    defaultValues,\r\n  });\r\n\r\n  // Methods to handle form\r\n  const {\r\n    reset,\r\n    watch,\r\n    setError,\r\n    handleSubmit,\r\n    formState: { errors, isSubmitting, isSubmitSuccessful, isValid },\r\n  } = methods;\r\n\r\n  const onSubmit = async (data) => {\r\n    try {\r\n      // submit data to backend\r\n      console.log(data);\r\n    } catch (error) {\r\n      console.log(error);\r\n      reset();\r\n      setError(\"afterSubmit\", {\r\n        ...error,\r\n        message: error.message,\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <FormProvider methods={methods} onSubmit={handleSubmit(onSubmit)}>\r\n      <Stack spacing={3}>\r\n        <RHFTextField name=\"title\" label=\"Title\" />\r\n        <RHFAutocomplete\r\n          name=\"members\"\r\n          label=\"Members\"\r\n          multiple\r\n          freeSolo\r\n          options={MEMBERS.map((option) => option)}\r\n          ChipProps={{ size: \"medium\" }}\r\n        />\r\n        <Stack\r\n          spacing={2}\r\n          direction=\"row\"\r\n          alignItems=\"center\"\r\n          justifyContent=\"end\"\r\n        >\r\n          <Button onClick={onClose} variant=\"contained\">\r\n            Cancel\r\n          </Button>\r\n          <Button type=\"submit\" variant=\"contained\">\r\n            Create\r\n          </Button>\r\n        </Stack>\r\n      </Stack>\r\n    </FormProvider>\r\n  );\r\n};\r\n\r\nexport default CreateGroupDialogForm;\r\n","// React\r\nimport { useState } from \"react\";\r\n\r\n// Chat\r\nimport Chat from \"./Chat\";\r\n\r\n// MUI\r\nimport { Stack, Typography, Link, IconButton } from \"@mui/material\";\r\n\r\n// MUI Styles\r\nimport { useTheme } from \"@mui/material/styles\";\r\n\r\n// Phosphor React\r\nimport { Plus } from \"phosphor-react\";\r\n\r\n// Importing Custom MUI Component\r\nimport AlertDialog from \"../../components/AlertDialog\";\r\n\r\n// Importing Form\r\nimport CreateGroupDialogForm from \"./CreateGroupDialogForm\";\r\n\r\nconst Group = () => {\r\n  // Theme\r\n  const theme = useTheme();\r\n\r\n  // State to handle Create New Group Dialog\r\n  const [openCreateNewGroup, setOpenCreateNewGroup] = useState(false);\r\n\r\n  const handlerOpenCreateNewGroup = () => {\r\n    setOpenCreateNewGroup(true);\r\n  };\r\n\r\n  const handlerCloseCreateNewGroup = () => {\r\n    setOpenCreateNewGroup(false);\r\n  };\r\n\r\n  // Option Component\r\n  const createNewGroup = (\r\n    <Stack direction=\"row\" alignItems=\"center\" justifyContent=\"space-between\">\r\n      <Typography variant=\"subtitle2\" component={Link}>\r\n        Create New Group\r\n      </Typography>\r\n      <IconButton onClick={handlerOpenCreateNewGroup}>\r\n        <Plus style={{ color: theme.palette.primary.main }} />\r\n      </IconButton>\r\n    </Stack>\r\n  );\r\n\r\n  return (\r\n    <>\r\n      <Chat\r\n        heading=\"Groups\"\r\n        type=\"All Groups\"\r\n        option={createNewGroup}\r\n        elementType=\"Chat\"\r\n      />\r\n      <AlertDialog\r\n        open={openCreateNewGroup}\r\n        onClose={handlerCloseCreateNewGroup}\r\n        dialogText=\"Hello\"\r\n        dialogForm={\r\n          <CreateGroupDialogForm onClose={handlerCloseCreateNewGroup} />\r\n        }\r\n        fullWidth\r\n        maxWidth=\"xs\"\r\n      ></AlertDialog>\r\n    </>\r\n  );\r\n};\r\n\r\nexport default Group;\r\n"],"names":["FormProvider","children","onSubmit","methods","RHFTextField","name","helperText","other","control","useFormContext","render","field","error","fieldState","TextField","fullWidth","value","message","RHFAutocomplete","label","setValue","handlerOnChange","event","newValue","shouldValidate","Autocomplete","onChange","renderInput","params","keyName","inputs","codesRef","useRef","Stack","direction","spacing","justifyContent","ref","map","index","autoFocus","placeholder","handleChange","target","maxLength","fieldIntIndex","Number","replace","nextField","document","querySelector","length","focus","handleChangeWithNextField","onFocus","currentTarget","select","InputProps","sx","width","xs","sm","height","p","textAlign","inputProps","type","MEMBERS","onClose","LoginSchema","Yup","shape","title","required","members","min","useForm","resolver","yupResolver","defaultValues","reset","setError","watch","handleSubmit","formState","errors","isSubmitting","isSubmitSuccessful","isValid","data","console","log","multiple","freeSolo","options","option","ChipProps","size","alignItems","Button","onClick","variant","theme","useTheme","useState","openCreateNewGroup","setOpenCreateNewGroup","handlerCloseCreateNewGroup","createNewGroup","Typography","component","Link","IconButton","style","color","palette","primary","main","Chat","heading","elementType","AlertDialog","open","dialogText","dialogForm","maxWidth"],"sourceRoot":""}